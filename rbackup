#!/usr/bin/env python

import sys
import os
import subprocess
from optparse import OptionParser
import re

#######################
# rsync command classes
#######################

class RsyncCommand(object):
    commandName = 'rsync'
    baseArgs = ['--archive', '--itemize-changes', '-vv']

    def __init__(self, src, dest, args=None):
        if args is None:
            args = []
        self._src = src
        self._dest = dest
        self._args = args

        if not self._src.endswith('/'):
            self._src += '/'

        self._handler = NullOutputHandler()

    def setOutputHandler(self, handler):
        self._handler = handler

    def addArgs(self, args):
        if isinstance(args, basestring):
            args = [args]
        self._args.extend(args)

    def run(self):
        args = [self.commandName] + self.baseArgs + self._extraArgs()
        args.extend(self._args)
        args.extend([self._src, self._dest])

        self._handler.log('rsync command: %s' % args)
        # line-buffered, capture stdout, tie stderr to stdout.
        proc = subprocess.Popen(args, bufsize=1, stdout=subprocess.PIPE,
                                stderr=subprocess.STDOUT)
        for line in proc.stdout:
            self._handler.rsyncLine(line)

        proc.wait()
        return proc.returncode

    # Overridable
    def _extraArgs(self):
        return []

class RsyncBackup(RsyncCommand):
    def __init__(self, src, dest, link=None, args=None):
        RsyncCommand.__init__(self, src, dest, args)
        self._link = link

    def _extraArgs(self):
        if self._link is None:
            return []
        else:
            return ['--link-dest=%s' % self._link]

class RsyncVerify(RsyncCommand):
    def _extraArgs(self):
        return ['--dry-run', '--checksum']

#################
# Output handlers
#################

class OutputHandler(object):
    def rsyncLine(self, line):
        raise NotImplementedError()

    def _formatLine(self, line):
        return line

    def log(self, mesg):
        raise NotImplementedError()

    def close(self):
        pass

class NullOutputHandler(OutputHandler):
    def rsyncLine(self, line):
        pass

    def log(self, mesg):
        pass

class SequenceOutputHandler(OutputHandler):
    def __init__(self, handlers=None):
        if handlers is None:
            handlers = []
        self._handlers = handlers

    def addHandler(self, handler):
        self._handlers.append(handler)

    def rsyncLine(self, line):
        for handler in self._handlers:
            handler.rsyncLine(line)

    def log(self, mesg):
        for handler in self._handlers:
            handler.log(mesg)

    def close(self):
        for handler in self._handlers:
            handler.close()

class StreamOutputHandler(OutputHandler):
    def __init__(self, stream=sys.stdout, close=False):
        self._stream = stream
        self._close = close

    def rsyncLine(self, line):
        self._stream.write(self._formatLine(line))

    def log(self, mesg):
        self._stream.write(mesg + '\n')

    def close(self):
        if self._close:
            self._stream.close()

class FileOutputHandler(StreamOutputHandler):
    def __init__(self, filename, mode='w'):
        StreamOutputHandler.__init__(self, open(filename, mode), close=True)
        self._filename = filename
        self._mode = mode

class AnnotationMixin(object):
    unchanged = re.compile(r'([h.].|cd) {9} ')
    new = re.compile(r'..\+{9} ')
    checksum_failed = re.compile(r'..c[s.][Tt.][p.][o.][g.][u.][a.][x.] ')
    itemized_line = re.compile(r'..[c.][s.][Tt.][p.][o.][g.][u.][a.][x.] ')

    def _formatLine(self, line):
        if self.unchanged.match(line):
            return '  ' + line
        elif self.new.match(line):
            return '+ ' + line
        elif self.checksum_failed.match(line):
            return '! ' + line
        elif self.itemized_line.match(line):
            return '? ' + line
        else:
            return '  ' + line

class AnnotatedFileOutputHandler(AnnotationMixin, FileOutputHandler):
    pass

class AnnotatedStreamOutputHandler(AnnotationMixin, StreamOutputHandler):
    pass

#########################
# Configuration and misc.
#########################

class Configuration(object):
    defaultConfig = {
        'LOG_DIR'     : None,
        'EXCLUDES'    : [],
        'RSYNC_OPTS'  : [],
        'BACKUP_OPTS' : [],
        'VERIFY_OPTS' : [],
    }

    requiredFields = ['SOURCE', 'BACKUP_POOL']

    def __init__(self, filename):
        self._conf = dict(self.defaultConfig)
        userConf = {}
        execfile(filename, userConf)
        self._conf.update(userConf)
        self._check()

    def _check(self):
        'Make sure required fields are present'
        missing = []
        for field in self.requiredFields:
            if field not in self._conf:
                missing.append(field)

        if missing:
            raise ValueError('Missing required configuration items: %r' %
                             missing)

    def __getattr__(self, name):
        if name in self._conf:
            return self._conf[name]

        raise AttributeError(name)

class Record(object):
    def __init__(self, filename):
        self._filename = filename
        self.last_backup = None

        try:
            f = open(self._filename, 'r')
            self.last_backup = f.read().strip()
            f.close()
        except IOError:
            pass

    def write(self):
        f = open(self._filename, 'w')
        print >> f, self.last_backup
        f.close()

def backup_name():
    import time
    return time.strftime('%Y-%m-%d_%H:%M:%S')

##################################
# Option parsing and main function
##################################

opt_parser = OptionParser(description='''Make backups using rsync, hardlinking
unchanged files to save space.''')

def options(args):
    opt_parser.add_option('-n', '--dry-run', action='store_true', help=
'''Don't make a backup, but write logs and output as if a backup were being
made.''')

    opt_parser.add_option('--config', metavar='CONFIG_DIR', help='''Use
CONFIG_DIR as the config directory instead of the default ~/.rbackup.''')

    opt_parser.add_option('--verify', action='store_true', help='''Verify the
most recent backup instead of creating a new backup.''')

    opt_parser.add_option('--previous', metavar='BACKUP_NAME', help='''Use
BACKUP_NAME as the previous backup. This is used as the backup to link to when
creating a new backup, or the backup to verify against when --verify is given.
By default the last backup name is automatically tracked, so this is usually
unnecessary.''')

    opt_parser.add_option('--rsync-opts', metavar='OPTION_STRING', help=
'''Extra options to pass to rsync. OPTION_STRING is split on whitespace and the
resulting items are passed as separate arguments to rsync. (This means that
you can't currently pass an argument that contains whitespace.)''')

    opt_parser.set_defaults(dry_run=False, config=None, verify=False,
                            previous=None, rsync_opts='')

    return opt_parser.parse_args(args)

def main(args=None):
    if args is None:
        args = sys.argv[1:]

    (opts, arguments) = options(args)

    if arguments:
        opt_parser.error('Unexpected arguments: %r' % arguments)

    # Set up some vars
    config_dir = opts.config or os.path.expanduser('~/.rbackup')
    config = Configuration(os.path.join(config_dir, 'rbackup.conf'))
    record = Record(os.path.join(config_dir, 'rbackup.last_backup'))
    prev_name = opts.previous or record.last_backup
    new_name = backup_name()

    # Set up output/logging
    output = SequenceOutputHandler()
    output.addHandler(AnnotatedStreamOutputHandler())
    if config.LOG_DIR:
        name = os.path.join(config.LOG_DIR, '%s.log' % new_name)
        output.addHandler(AnnotatedFileOutputHandler(name))

    if opts.verify:
        if prev_name is not None:
            target = os.path.join(config.BACKUP_POOL, prev_name)
        else:
            output.log('No last backup to verify!')
            return 1
        command = RsyncVerify(config.SOURCE, target)
    else:
        if prev_name is not None:
            link = os.path.join('..', prev_name)
        else:
            link = None
        target = os.path.join(config.BACKUP_POOL, new_name)
        command = RsyncBackup(config.SOURCE, target, link)

    command.setOutputHandler(output)

    if opts.dry_run:
        command.addArgs('--dry-run')
    if config.EXCLUDES:
        command.addArgs(['--exclude=%s' % exc for exc in config.EXCLUDES])
    # Add options from config file and command line, in that order.
    command.addArgs(config.RSYNC_OPTS)
    if opts.verify:
        command.addArgs(config.VERIFY_OPTS)
    else:
        command.addArgs(config.BACKUP_OPTS)
    command.addArgs(opts.rsync_opts.split())

    result = command.run()
    if result is None:
        output.log("rsync didn't exit??")
        result = 1
    elif result > 0:
        output.log('rsync error: %d' % result)
    elif result < 0:
        output.log('rsync exited with signal %d' % -result)
        result = 1

    output.close()

    if not opts.verify and not opts.dry_run:
        record.last_backup = new_name
        record.write()

    return result

if __name__ == '__main__':
    sys.exit(main())
