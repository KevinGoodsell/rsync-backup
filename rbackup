#!/usr/bin/env python

import sys
import os
import subprocess
import getopt

class RsyncCommand(object):
    commandName = 'rsync'
    baseArgs = ['--archive', '--itemize-changes', '-vv']

    def __init__(self, src, dest, link=None, args=None):
        if args is None:
            args = []
        self._src = src
        self._dest = dest
        self._link = link
        self._args = args

        if not self._src.endswith('/'):
            self._src += '/'

        self._handlers = []

    def addOutputHandler(self, handler):
        self._handlers.append(handler)

    def addArgs(self, args):
        if isinstance(args, basestring):
            args = [args]
        self._args.extend(args)

    def run(self):
        args = [self.commandName] + self.baseArgs + self._args
        args.extend(self._extraArgs())

        if self._link is not None:
            args.append('--link-dest=../%s' % self._link)

        args.extend([self._src, self._dest])

        print >> sys.stderr, 'rsync command: %s' % args
        proc = subprocess.Popen(args, stdout=subprocess.PIPE)
        for line in proc.stdout:
            for handler in self._handlers:
                handler.output(line)

        proc.wait()
        return proc.returncode

    # Overridable
    def _extraArgs(self):
        return []

class RsyncBackup(RsyncCommand):
    pass

class RsyncVerify(RsyncCommand):
    def _extraArgs(self):
        return ['--dry-run', '--checksum']

class OutputHandler(object):
    def output(self, line):
        raise NotImplementedError()

class StreamOutputHandler(OutputHandler):
    def __init__(self, stream=sys.stdout):
        self._stream = stream

    def output(self, line):
        self._stream.write(line)

class FileOutputHandler(StreamOutputHandler):
    def __init__(self, filename, mode='w'):
        StreamOutputHandler.__init__(self, open(filename, mode))
        self._filename = filename
        self._mode = mode

class Configuration(object):
    defaultConfig = {
        'LOG_NAME' : None,
    }

    requiredFields = ['SOURCE', 'BACKUP_POOL']

    def __init__(self, filename):
        self._conf = dict(self.defaultConfig)
        userConf = {}
        execfile(filename, userConf)
        self._conf.update(userConf)
        self._check()

    def _check(self):
        'Make sure required fields are present'
        missing = []
        for field in self.requiredFields:
            if field not in self._conf:
                missing.append(field)

        if missing:
            raise ValueError('Missing required configuration items: %r' %
                             missing)

    def __getattr__(self, name):
        if name in self._conf:
            return self._conf[name]

        raise AttributeError(name)

class Record(object):
    def __init__(self, filename):
        self._filename = filename
        self.last_backup = None

        try:
            f = open(self._filename, 'r')
            self.last_backup = f.read().strip()
            f.close()
        except IOError:
            pass

    def write(self):
        f = open(self._filename, 'w')
        print >> f, self.last_backup
        f.close()

def backup_name():
    import time
    return time.strftime('%Y-%m-%d_%H:%M:%S')

def main(args=None):
    if args is None:
        args = sys.argv[1:]

    try:
        (opts, arguments) = getopt.getopt(args, '', ['config=', 'rsync_opts=',
                                          'verify'])
    except getopt.GetoptError, e:
        raise # XXX Do something smarter later

    config_dir = os.path.expanduser('~/.rbackup')
    rsync_opts = []
    verify = False

    for (opt, val) in opts:
        if opt == '--config':
            config_dir = val
        elif opt == '--rsync_opts':
            rsync_opts.extend(val.split())
        elif opt == '--verify':
            verify = True

    config = Configuration(os.path.join(config_dir, 'rbackup.conf'))
    record = Record(os.path.join(config_dir, 'rbackup.last_backup'))

    if verify:
        cmd_class = RsyncVerify
    else:
        cmd_class = RsyncBackup

    # XXX This is all wrong for verify
    new_name = backup_name()
    target = os.path.join(config.BACKUP_POOL, new_name)
    command = cmd_class(config.SOURCE, target, record.last_backup, rsync_opts)

    command.addOutputHandler(StreamOutputHandler())
    if config.LOG_NAME:
        command.addOutputHandler(FileOutputHandler(config.LOG_NAME))

    result = command.run()
    if result is None:
        print >> sys.stderr, "rsync didn't exit??"
        result = 1
    elif result > 0:
        print >> sys.stderr, 'rsync error: %d' % result
    elif result < 0:
        print >> sys.stderr, 'rsync exited with signal %d' % -result
        result = 1

    record.last_backup = new_name
    record.write()

    return result

if __name__ == '__main__':
    sys.exit(main())
